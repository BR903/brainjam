HOW TO COMPILE THIS CODE FOR WINDOWS ON A LINUX HOST

Here are the steps I took in order to cross-compile a Windows
executable on a Linux machine:

1. Install the mingw32 cross-compiling tools. On a modern Debian-based
   system this involves simply running "sudo apt install mingw32". The
   package creates a directory tree under /usr/x86_64-w64-mingw32 (for
   a 64-bit kernel), as well as installing build tools named
   x86_64-w64-mingw32-gcc, x86_64-w64-mingw32-ld, etcetera, under
   /usr/bin. Once these are installed, you should be able to use the
   cross-build.sh script in this directory as a wrapper around
   invocations of ./configure and make, in order to automatically
   orient those processes to your mingw32 tools.

2. Install Windows versions of the dependent libraries. The Windows
   binary depends on SDL2, SDL2_ttf, and libpng. (The fontconfig
   library is not applicable, as the Windows API has its own method
   for font management, and ncurses is unavailable on Windows, since
   Windows doesn't have any equivalent to termcap/terminfo.) The
   project home pages for SDL2 and SDL2_ttf both provide zipfiles of
   development packages for mingw32, with simple instructions for
   installation. For libpng, the only pre-built packages I could find
   were for 32-bit versions, so I had to grab the source tree and
   build and install it myself. In addition, my libraries were built
   with a dependency on zlib, so I had to build that also.

3. The Windows build script also uses a program called icotool. On a
   Debian-based system, icotool is part of the "icoutils" package.
   (ImageMagick does provide a tool for building Windows icons as
   well, namely "ppmtowinicon". I didn't use that since it is more
   cumbersome, requiring the source PNGs to first be broken out into
   PPM/PGM pairs. However the ImageMagick tools are probably more
   ubiquitous, so that might be the better solution?)

4. With all of that out of the way, you should be able to proceed
   directly to building Brain Jam. Run the configuration tool via
   cross-build.sh and specifying the "--enable-windows" flag:

       src/windows/cross-build.sh configure --enable-windows

   (Or copy cross-build.sh to the top-level directory first; I only
   have it there to keep all of the windows-specific files in one
   place.) If the configure script fails because it can't find a build
   tool, you may need to explicitly provide variable definitions on
   the configure command line. (Ideally, that should all be taken care
   of for you by cross-build.sh, but I haven't really tested it
   widely.)

5. Assuming the configure script produced a sensible makefile include,
   use the cross-build.sh script again, this time to run make:

       src/windows/cross-build.sh make

   If the build fails, it is likely due either to some part of the
   environment pointing to the wrong directory tree, or the wrong
   build tool being used.

6. Assuming the build succeeds, the resulting executable will be
   located at "src/brainjam". No, I couldn't be bothered to have it
   correctly named. Just manually rename it to "brainjam.exe".

Congratulations! You now have a Windows binary. In order to use it,
you need to copy it to your Windows machine, along with the DLLs that
it depends on. In the Windows world, it's pretty common to store DLLs
in the same directory as your binary. The alternative (storing them in
a central Windows system directory) runs the risk of breaking other
programs if they're dependent on an earlier version of the same
library.

(A better alternative to DLL-wrangling might be to statically link
with these libraries. Dynamic linking is less necessary on Windows
than on Unix, and the fact that the program needs to be distributed
with all of its dependent libraries somewhat obviates the advantages.)
