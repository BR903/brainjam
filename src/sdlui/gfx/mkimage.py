#!/usr/bin/env python
#
# Usage: mkimages.py SRCDIR IMAGE.PNG IDLIST.H LAYOUT.H
#
# Compile a set of small images into a single PNG file, along with two
# header files to allow C code easy access to the individual source
# images.
#
# The script expects to receive (via standard input) a list of image
# files to combine into a single output image, one source image per
# line of input. The format of each line is: "NAME X Y W H", in which
# (X, Y, W, H) gives the bounding rectangle of where the source image
# should be placed in the output image, and NAME identifies the
# filename of the source image. (Each item in the line can be
# separated by arbitrary whitespace.) All of the source images are
# PNGs, and are required to be stored in a single directory, which is
# given on the command line. Thus the full path to each source image
# is "SRCDIR/NAME.png". The image's NAME is also used to form the name
# of the image in the header files, and should therefore be a valid C
# identifier.
#
# The first C header file is simply a list of macro constants,
# assigning each source image a unique index number. The second C
# header file is the body of an C array initialization, each element
# being the bounding rectangle of each source image. (The second file
# is meant to be included in the middle of the actual array
# definition.)

import sys
from PIL import Image

# Return True if the two rectangles overlap at any point.
def overlap(rect1, rect2):
    return (rect1['x'] + rect1['w'] > rect2['x'] and
            rect1['y'] + rect1['h'] > rect2['y'] and
            rect1['x'] < rect2['x'] + rect2['w'] and
            rect1['y'] < rect2['y'] + rect2['h'])

# Read a sequence of image names, positions, and sizes from the given
# input file and return the data as a list. The locations are
# validated to ensure that none of them overlap each other.
def readimagelist(infile):
    images = []
    for line in infile.readlines():
        line = line.strip()
        if not line or line.startswith('#'):
            continue
        name, x, y, w, h = line.split()
        image = { 'name': name }
        image['x'] = int(x)
        image['y'] = int(y)
        image['w'] = int(w)
        image['h'] = int(h)
        for prior in images:
            if overlap(prior, image):
                sys.exit('%s and %s overlap!' % (prior['name'], image['name']))
        images.append(image)
    return images

# Return a single image that contains all of the images named in the
# given list. The imagedir argument names the directory that contains
# the actual PNG files.
def compile(imagedir, images):
    w, h = 0, 0
    for image in images:
        if w < image['x'] + image['w']:
            w = image['x'] + image['w']
        if h < image['y'] + image['h']:
            h = image['y'] + image['h']
    fullimage = Image.new('RGBA', (w, h))
    for image in images:
        filename = '%s/%s.png' % (imagedir, image['name'])
        sprite = Image.open(filename)
        if sprite.size != (image['w'], image['h']):
            sys.exit('invalid size for %s!' % image['name'])
        fullimage.paste(sprite, (image['x'], image['y']))
        sprite.close()
    return fullimage

# Output a sequence of C macro declarations assigning index numbers to
# each image name, in the order that they appear in the given list.
def writeidlist(images, out):
    out.write('/* This source file is generated by mkimages.py. */\n')
    spacing = 4
    for image in images:
        if spacing < len(image['name']):
          spacing = len(image['name'])
    out.write('#define IMAGE_%-*s 0\n' % (spacing, 'NONE'))
    for i in range(len(images)):
        out.write('#define IMAGE_%-*s %d\n' %
                  (spacing, images[i]['name'].upper(), i + 1))

# Output the initialization body of a C array definition containing
# the coordinates of each image's position and size, in the order that
# they appear in the given list.
def writelayout(images, out):
    out.write('/* This source file is generated by mkimages.py. */\n')
    out.write('  {   0,  0,  0,  0 },\n')
    for image in images:
        out.write('  {%4d,%3d,%3d,%3d },\n' %
                  (image['x'], image['y'], image['w'], image['h']))

# A input file listing image names and locations is used to generate
# a combined output image, along with corresponding header files
# containing the layout data formatted for use in C code.
def makeimage(infile, imagedir, imagefilename, idlistfilename, layoutfilename):
    images = readimagelist(infile)
    fullimage = compile(imagedir, images)
    fullimage.save(imagefilename)
    writeidlist(images, open(idlistfilename, 'w'))
    writelayout(images, open(layoutfilename, 'w'))


if len(sys.argv) != 5:
    sys.exit('Usage: mkimages.py SRCDIR IMAGE.PNG IDLIST.H LAYOUT.H')
makeimage(sys.stdin, *sys.argv[1:])
